package edu.columbia.cs.utils;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Map.Entry;



/**
 * The Class NAryCartesianProduct provides method to compute an n-ary cartesian product
 * of generic objects.
 *
 * @author      Pablo Barrio
 * @author		Goncalo Simoes
 * @version     0.1
 * @since       2011-09-27
 */
public class NAryCartesianProduct {
	
	/**
	 * Compute the n-ary Cartesian product.
	 * 
	 * <br>
	 * <br>
	 * 
	 * The input is given as a Map where the keys are the identifiers of each dimension and
	 * the values are the sets of values to be mixed up in the Cartesian product.
	 *
	 * @param <A> the objects that identify the dimensions
	 * @param <B> the objects that will be mixed
	 * @param input a Map where the keys are the identifiers of each dimension and
	 * the values are the sets of values to be mixed up in the Cartesian product.
	 * @return the list of all combinations generated by the n-ary Cartesian product
	 */
	public static <A,B> List<Map<A,B>> generateAllPossibilities(Map<A,Set<B>> input){
		List<Pair<A,Set<B>>> in = new ArrayList<Pair<A,Set<B>>>();
		
		for(Entry<A,Set<B>> entry : input.entrySet()){
			in.add(new Pair<A,Set<B>>(entry.getKey(),entry.getValue()));
		}
		
		return generateAllPossibilities(in);
	}
	
	/**
	 * Compute the n-ary Cartesian product.
	 * 
	 * <br>
	 * <br>
	 * 
	 * The input is given as a List of pairs where, for each pair the first elements are
	 * the identifiers of each dimension and the second elements are the sets of values to
	 * be mixed up in the Cartesian product.
	 *
	 * @param <A> the objects that identify the dimensions
	 * @param <B> the objects that will be mixed
	 * @param input a List of pairs where, for each pair the first elements are
	 * the identifiers of each dimension and the second elements are the sets of values to
	 * be mixed up in the Cartesian product.
	 * @return the list of all combinations generated by the n-ary Cartesian product
	 */
	private static <A,B> List<Map<A,B>> generateAllPossibilities(List<Pair<A,Set<B>>> input){
		if(input.size()==0){
			List<Map<A,B>> l = new ArrayList<Map<A,B>>();
			l.add(new HashMap<A,B>());
			return l;
		} else {
			Pair<A, Set<B>> entry = input.get(0);
			
			List<Pair<A,Set<B>>> newList = new ArrayList<Pair<A,Set<B>>>();
			for(int i=1;i<input.size();i++){
				newList.add(input.get(i));
			}
			
			List<Map<A,B>> results = generateAllPossibilities(newList);
			List<Map<A,B>> newResults = new ArrayList<Map<A,B>>();
			
			for(B newEntry : entry.second()){
				for(Map<A,B> previousMap : results){
					Map<A,B> newMap = new HashMap<A,B>();
					for(Entry<A,B> e : previousMap.entrySet()){
						newMap.put(e.getKey(), e.getValue());
					}
					newMap.put(entry.first(), newEntry);
					newResults.add(newMap);
				}
			}
			return newResults;
		}
	}
}
